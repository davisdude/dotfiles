#!/usr/bin/env sh
#
# /usr/local/bin/volume-control
#
# Author:        Davis Claiborne
# Last modified: Tuesday, January 2, 2018
# Description:   Toggles the state of Alsa.

# Determines if headphones are plugged in.
# 0 if headphones out, 1 if in.
function areHeadphonesIn {
	echo $(\
		grep -E -A 6 "Node 0x03 \[Audio Output\] wcaps 0x41d: Stereo Amp-Out" \
			/proc/asound/card0/codec#0 \
		| grep "Amp-Out vals:  \[0x19 0x19\]" \
		| wc -l
	)
}

# Gets whether the device (parameter passed) is muted or not.
# 0 if device is unmuted, 1 if it is muted.
function isDeviceMuted {
	dev=$1
	echo $(amixer get $dev | grep -E "Mono:.*\[off\]$" | wc -l)
}

function changeState {
	state=$1
	headphonesIn=$(areHeadphonesIn)

	amixer -q set Master $state

	if [ "$headphonesIn" == "0" ]
		amixer -q set Speaker $state
	then
		amixer -q set Headphone $state
	fi
}

function mute {
	changeState mute
}

function unmute {
	changeState unmute
}

function toggleMute {
	isMuted=$(isDeviceMuted Master)

	if [ "$isMuted" == "0" ]
	then
		mute
	else
		unmute
	fi
}

# Parse arguments
if [ $# -eq 1 ]
then
	command=$1
	
	case "$command" in
		"mute")
			mute
			exit 1
			;;
		"unmute")
			unmute
			exit 1
			;;
		"toggle")
			toggleMute
			exit 1
			;;
	esac
fi

cat <<'EOF'
volume-control: A simple interface for muting and unmuting devices in Alsa.
Written by Davis Claiborne, 2018

Usage:

	volume-control [action]

Action:

	mute      Mute the device
	unmute    Unmute the device
	toggle    Toggle the device between muted and unmuted

EOF

# vim:ft=sh
