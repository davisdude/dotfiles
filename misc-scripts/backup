#!/usr/bin/env sh
#
# /usr/bin/local/backup
#
#
# Author:        Davis Claiborne
# Last modified: Saturday, May 2, 2020
# Description:   Backs up my files and packages.

# Flags:
# -b --backup_dir: Specifies location to create backup
# -d --directory:  Specifies location to backup
# -q --quiet:      Suppress script output (some)
# -d --deploy:     Apply backup

# Default variables; change as needed
backup_dir=/mnt/backup/
directory=$HOME
quiet=false
deploy=false

###############################################################################
# Argument parsing
###############################################################################

while [ $# -gt 0 ]
do
	key="$1"

	case "$key" in
		-b | --backup_dir )
			backup_dir="$2"
			shift
			shift
			;;
		-d | --directory )
			user="$2"
			shift
			shift
			;;
		-q | --quiet )
			quiet=true
			shift
			;;
		-d | --deploy  )
			deploy=true
			shift
			;;
		* )
			echo "Error: Invalid flag '$key'"
			exit
			;;
	esac
done

###############################################################################
# Helper functions
###############################################################################

# Formats the output of pacman queries in a way that can be used later for easy
# installation
function format_package_list() {
	echo "$1" \
	| tr '\n' ' '
}

# I'm too lazy to add a conditional to every echo statement, so this *should*
# be okay, but don't quote me on it.
if $quiet
then
	function echo() {
		return
	}
fi

###############################################################################
# Actual script
###############################################################################

if ( $deploy ); then
	# Copies backup
	rsync --archive --verbose --human-readable --progress \
		--exclude='pacman-native-packages.txt' \
		--exclude='pacman-foreign-packages.txt' \
		$backup_dir $directory

	# Installs native packages
	sudo pacman -S - < $backup_dir/pacman-native-packages.txt

	# Installs foreign packages
	tmp_dir=/tmp
	while read p; do
		auracle --chdir=$tmp_dir download $p
	done < $backup_dir/pacman-foreign-packages.txt
	find $tmp_dir -name PKGBUILD -execdir makepkg --syncdeps --install \;
else
	# Gets all native packages.
	echo Storing native packages
	native_packages="$(pacman --query --explicit --native --quiet --unrequired)"
	format_package_list "$native_packages" > $backup_dir/pacman-native-packages.txt

	# Gets a list of all foreign packages.
	echo Storing foreign packages...
	foreign_packages="$(pacman --query --explicit --foreign --quiet --unrequired)"
	echo "$foreign_packages" > $backup_dir/pacman-foreign-packages.txt

	# Excludes specific files
	top=$(basename $directory)
	find $directory -type f ! -newer $backup_dir/last-updated.txt > $backup_dir/exclude-files.txt

	# Fixes path for exclude to work properly
	sed -i "s|^$directory|/$top|g" exclude-files.txt

	# Excludes extra files
	echo "/$top/VirtualBox VMs/" >> $backup_dir/exclude-files.txt
	echo "/$top/temp" >> $backup_dir/exclude-files.txt
	echo "/$top/dotfiles" >> $backup_dir/exclude-files.txt
	echo '.*' >> $backup_dir/exclude-files.txt
	echo '_minted*' >> $backup_dir/exclude-files.txt
	echo 'CMakeFiles' >> $backup_dir/exclude-files.txt
	echo '__pycache__' >> $backup_dir/exclude-files.txt

	# Performs backup
	echo Performing backup
	rsync --archive --verbose --human-readable --progress --cvs-exclude \
		--exclude-from=$backup_dir/exclude-files.txt \
		$directory $backup_dir

	# Gets time (used to exclude intentionally deleted files)
	touch $backup_dir/last-updated.txt
	rm $backup_dir/exclude-files.txt
fi
